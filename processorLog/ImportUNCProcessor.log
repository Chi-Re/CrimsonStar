processor: ImportUNCProcessor (full class name: universecore.annotations.ImportUNCProcessor)
time: Sun Apr 30 11:29:32 CST 2023

-----------------------------------------
annotation: universecore.annotations.Annotations.ImportUNC
-----------------------------------------

> class: chire.ChireJavaMod
  1| 
  2| @Annotations.ImportUNC(requireVersion = "1.17.4")
  3| public class ChireJavaMod extends Mod {
  4|     private static byte $status$;
  5|     static {
  6|         String $libVersionValue = "0.0.0";
  7|         {
  8|             final arc.struct.ObjectMap<String, String> bundles = arc.struct.ObjectMap.of("", "warn.uncLoadFailed = UniverseCore failed to load\nwarn.uncDisabled = UniverseCore mod has been disabled\nwarn.uncNotFound = UniverseCore mod file does not exist or is missing\nwarn.libNotFound = NotFound\nwarn.currentUncVersion = Current UniverseCore version: {0} It is recommended to install or update the latest version of UniverseCore\nwarn.uncVersionOld = UniverseCore version is outdated, requires: {0}\nwarn.uncVersionNewer = UniverseCore version is too newer, requires: {0}\nwarn.download = Download\nwarn.downloading = downloading...\nwarn.downloadFailed = download failed\nwarn.cancel = cancel\nwarn.openfile = import from file\nwarn.goLibPage = go to github\nwarn.openModDir = Go to the mods directory\nwarn.exit = quit\nwarn.androidOpenFolder = Failed to open the directory, you can go to the following path:\n[accent]android/data/io.anuke.mindustry/mods[]\n[gray]The address has been copied to the clipboard\nwarn.enableLib = enable mod\nwarn.caused = The following mods cannot be loaded correctly due to abnormal Universe Core status\n", "zh_TW", "warn.uncLoadFailed = UniverseCore \u52a0\u8f09\u5931\u6557\nwarn.uncDisabled = UniverseCore mod \u5df2\u88ab\u7981\u7528\nwarn.uncNotFound = UniverseCore mod \u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u5df2\u4e1f\u5931\nwarn.libNotFound = \u672a\u627e\u5230\nwarn.currentUncVersion = \u7576\u524dUniverseCore\u7248\u672c\uff1a{0} \u5efa\u8b70\u5b89\u88dd\u6216\u66f4\u65b0\u6700\u65b0\u7248\u672c\u7684UniverseCore\nwarn.uncVersionOld = UniverseCore \u7248\u672c\u904e\u820a\uff0c\u9700\u8981\uff1a{0}\nwarn.uncVersionNewer = UniverseCore \u7248\u672c\u592a\u904e\u8d85\u524d\uff0c\u7576\u524d\u9700\u8981\uff1a{0}\nwarn.download = \u4e0b\u8f09\nwarn.downloading = \u4e0b\u8f09\u4e2d...\nwarn.downloadFailed = \u4e0b\u8f09\u5931\u6557\nwarn.cancel = \u53d6\u6d88\nwarn.openfile = \u5f9e\u6587\u4ef6\u5c0e\u5165\nwarn.goLibPage = \u524d\u5f80github\nwarn.openModDir = \u524d\u5f80mods\u76ee\u9304\nwarn.exit = \u9000\u51fa\nwarn.androidOpenFolder = \u6253\u958b\u76ee\u9304\u5931\u6557\uff0c\u60a8\u53ef\u524d\u5f80\u5982\u4e0b\u8def\u5f91\uff1a\n[accent]android/data/io.anuke.mindustry/mods[]\n[gray]\u5730\u5740\u5df2\u5fa9\u88fd\u5230\u526a\u8cbc\u677f\nwarn.enableLib = \u5553\u7528mod\nwarn.caused = \u4ee5\u4e0bmod\u7531\u65bcUniverse Core\u72c0\u614b\u7570\u5e38\u7121\u6cd5\u6b63\u78ba\u52a0\u8f09\n", "ru", "warn.uncLoadFailed = UniverseCore \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\nwarn.uncDisabled = \u041c\u043e\u0434 UniverseCore \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d.\nwarn.uncNotFound = \u0424\u0430\u0439\u043b \u043c\u043e\u0434\u0430 UniverseCore \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442\nwarn.libNotFound = \u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\nwarn.currentUncVersion = \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f UniverseCore: {0} \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0432\u0435\u0440\u0441\u0438\u044e UniverseCore.\nwarn.uncVersionOld = \u0412\u0435\u0440\u0441\u0438\u044f UniverseCore \u0443\u0441\u0442\u0430\u0440\u0435\u043b\u0430, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: {0}\nwarn.uncVersionNewer = \u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043d\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f UniverseCore, \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: {0}\nwarn.download = \u0441\u043a\u0430\u0447\u0430\u0442\u044c\nwarn.downloading = \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435...\nwarn.downloadFailed = \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c\nwarn.cancel = \u041e\u0442\u043c\u0435\u043d\u0430\nwarn.openfile = \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\nwarn.goLibPage = \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\nwarn.openModDir = \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043c\u043e\u0434\u043e\u0432\nwarn.exit = \u043f\u043e\u043a\u0438\u0434\u0430\u0442\u044c\nwarn.androidOpenFolder = \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u043a\u0430\u0442\u0430\u043b\u043e\u0433, \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0443\u0442\u0438:\n[accent]android/data/io.anuke.mindustry/mods[]\n[gray]\u0410\u0434\u0440\u0435\u0441 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d \u0432 \u0431\u0443\u0444\u0435\u0440 \u043e\u0431\u043c\u0435\u043d\u0430\nwarn.enableLib = \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u044b\nwarn.caused = \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u044b \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0437-\u0437\u0430 \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 Universe Core.\n", "ja", "warn.uncLoadFailed = UniverseCore \u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\nwarn.uncDisabled = UniverseCore mod \u304c\u7121\u52b9\u5316\u3055\u308c\u307e\u3057\u305f\nwarn.uncNotFound = UniverseCore mod \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u304b\u3001\u898b\u3064\u304b\u308a\u307e\u305b\u3093\nwarn.libNotFound = \u898b\u3064\u304b\u308a\u307e\u305b\u3093\nwarn.currentUncVersion = \u73fe\u5728\u306e UniverseCore \u30d0\u30fc\u30b8\u30e7\u30f3: {0} UniverseCore \u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u307e\u305f\u306f\u66f4\u65b0\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\nwarn.uncVersionOld = UniverseCore \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5fc5\u8981\u306a\u3082\u306e: {0}\nwarn.uncVersionNewer = UniverseCore \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u65b0\u3057\u3059\u304e\u307e\u3059\u3002\u73fe\u5728\u5fc5\u8981\u306a\u3082\u306e: {0}\nwarn.download = \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nwarn.downloading = \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\nwarn.downloadFailed = \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\nwarn.cancel = \u30ad\u30e3\u30f3\u30bb\u30eb\nwarn.openfile = \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\nwarn.goLibPage = \u30ae\u30c3\u30c8\u30cf\u30d6\u306b\u884c\u304f\nwarn.openModDir = mods \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\nwarn.exit = \u7d42\u4e86\u3059\u308b\nwarn.androidOpenFolder = \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u958b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u6b21\u306e\u30d1\u30b9\u306b\u79fb\u52d5\u3067\u304d\u307e\u3059:\n[accent]android/data/io.anuke.mindustry/mods[]\n[gray]\u30a2\u30c9\u30ec\u30b9\u306f\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c9\u306b\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3057\u305f\nwarn.enableLib = \u6539\u9020\u3092\u6709\u52b9\u306b\u3059\u308b\nwarn.caused = \u30e6\u30cb\u30d0\u30fc\u30b9\u30b3\u30a2\u306e\u72b6\u614b\u7570\u5e38\u306b\u3088\u308a\u3001\u4ee5\u4e0b\u306eMOD\u304c\u6b63\u5e38\u306b\u30ed\u30fc\u30c9\u3067\u304d\u306a\u3044\n", "zh_CN", "warn.uncLoadFailed = UniverseCore \u52a0\u8f7d\u5931\u8d25\nwarn.uncDisabled = UniverseCore mod \u5df2\u88ab\u7981\u7528\nwarn.uncNotFound = UniverseCore mod \u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u5df2\u4e22\u5931\nwarn.libNotFound = \u672a\u627e\u5230\nwarn.currentUncVersion = \u5f53\u524dUniverseCore\u7248\u672c\uff1a{0}  \u5efa\u8bae\u5b89\u88c5\u6216\u66f4\u65b0\u6700\u65b0\u7248\u672c\u7684UniverseCore\nwarn.uncVersionOld = UniverseCore \u7248\u672c\u8fc7\u65e7\uff0c\u9700\u8981\uff1a{0}\nwarn.uncVersionNewer = UniverseCore \u7248\u672c\u592a\u8fc7\u8d85\u524d\uff0c\u5f53\u524d\u9700\u8981\uff1a{0}\nwarn.download = \u4e0b\u8f7d\nwarn.downloading = \u4e0b\u8f7d\u4e2d...\nwarn.downloadFailed = \u4e0b\u8f7d\u5931\u8d25\nwarn.cancel = \u53d6\u6d88\nwarn.openfile = \u4ece\u6587\u4ef6\u5bfc\u5165\nwarn.goLibPage = \u524d\u5f80github\nwarn.openModDir = \u524d\u5f80mods\u76ee\u5f55\nwarn.exit = \u9000\u51fa\nwarn.androidOpenFolder = \u6253\u5f00\u76ee\u5f55\u5931\u8d25\uff0c\u60a8\u53ef\u524d\u5f80\u5982\u4e0b\u8def\u5f84\uff1a\n[accent]android/data/io.anuke.mindustry/mods[]\n[gray]\u5730\u5740\u5df2\u590d\u5236\u5230\u526a\u8d34\u677f\nwarn.enableLib = \u542f\u7528mod\nwarn.caused = \u4ee5\u4e0bmod\u7531\u4e8eUniverseCore\u72b6\u6001\u5f02\u5e38\u65e0\u6cd5\u6b63\u786e\u52a0\u8f7d\n");
  9|             arc.files.Fi[] $modsFiles = arc.Core.settings.getDataDirectory().child("mods").list();
 10|             arc.files.Fi $libFileTemp = null;
 11|             arc.files.Fi $modFile = null;
 12|             java.util.concurrent.atomic.AtomicBoolean $disabled = new java.util.concurrent.atomic.AtomicBoolean(false);
 13|             for (arc.files.Fi $file : $modsFiles) {
 14|                 if ($file.isDirectory() || (!$file.extension().equals("jar") && !$file.extension().equals("zip"))) continue;
 15|                 try {
 16|                     arc.files.Fi $zipped = new arc.files.ZipFi($file);
 17|                     arc.files.Fi $modManifest = $zipped.child("mod.hjson");
 18|                     if ($modManifest.exists()) {
 19|                         arc.util.serialization.Jval $fest = arc.util.serialization.Jval.read($modManifest.readString());
 20|                         String $name = $fest.get("name").asString();
 21|                         String $version = $fest.get("version").asString();
 22|                         if ($name.equals("universe-core")) {
 23|                             $libFileTemp = $file;
 24|                             $libVersionValue = $version;
 25|                         } else if ($fest.has("main") && $fest.getString("main").equals(chire.ChireJavaMod.class.getName())) {
 26|                             $modFile = $file;
 27|                         }
 28|                     }
 29|                 } catch (Throwable e) {
 30|                     continue;
 31|                 }
 32|                 if ($modFile != null && $libFileTemp != null) break;
 33|             }
 34|             assert $modFile != null;
 35|             arc.func.Intf<String> $versionValid = (v)->{
 36|                 String[] $lib = v.split("\\.");
 37|                 String[] $req = "1.17.4".split("\\.");
 38|                 if (Integer.parseInt($lib[0]) > Integer.parseInt($req[0])) return 2;
 39|                 for (int i = 1; i < $lib.length; i++) {
 40|                     if (Integer.parseInt($lib[i]) > Integer.parseInt($req[i])) return 0;
 41|                     if (Integer.parseInt($lib[i]) < Integer.parseInt($req[i])) return 1;
 42|                 }
 43|                 return 0;
 44|             };
 45|             arc.Events.on(mindustry.game.EventType.ClientLoadEvent.class, (e)->{
 46|                 arc.util.Time.run(1, ()->{
 47|                     arc.Core.settings.remove("unc-checkFailed");
 48|                     arc.Core.settings.remove("unc-warningShown");
 49|                 });
 50|             });
 51|             Runtime.getRuntime().addShutdownHook(new Thread(()->{
 52|                 arc.Core.settings.remove("unc-checkFailed");
 53|                 arc.Core.settings.remove("unc-warningShown");
 54|             }));
 55|             final arc.files.Fi $libFile = $libFileTemp;
 56|             final String $libVersion = $libVersionValue;
 57|             final boolean $upgrade = $versionValid.get($libVersion) == 1;
 58|             final boolean $requireOld = $versionValid.get($libVersion) == 2;
 59|             if (mindustry.Vars.mods.getMod("universe-core") == null || $upgrade || !arc.Core.settings.getBool("mod-universe-core-enabled", true)) {
 60|                 if ($libFile == null || !$libFile.exists() || $upgrade || !arc.Core.settings.getBool("mod-universe-core-enabled", true)) {
 61|                     arc.util.io.PropertiesUtils.load(arc.Core.bundle.getProperties(), new java.io.StringReader(bundles.get(arc.Core.bundle.getLocale().toString(), bundles.get(""))));
 62|                     String $curr = arc.Core.settings.getString("unc-checkFailed", "");
 63|                     $curr += $modFile.path() + "::";
 64|                     if (!arc.Core.settings.getBool("mod-universe-core-enabled", true)) {
 65|                         $curr += "dis";
 66|                         $status$ = 1;
 67|                         $disabled.set(true);
 68|                     } else if ($libFile == null) {
 69|                         $curr += "none";
 70|                         $status$ = 2;
 71|                     } else if ($upgrade) {
 72|                         $curr += "old1.17.4";
 73|                         $status$ = 3;
 74|                     } else if ($requireOld) {
 75|                         $curr += "new1.17.4";
 76|                         $status$ = 4;
 77|                     }
 78|                     $curr += ";";
 79|                     arc.Core.settings.put("unc-checkFailed", $curr);
 80|                     if (!arc.Core.settings.getBool("unc-warningShown", false)) {
 81|                         arc.Core.settings.put("unc-warningShown", true);
 82|                         arc.Events.on(mindustry.game.EventType.ClientLoadEvent.class, (e)->{
 83|                             String $modStatus = arc.Core.settings.getString("unc-checkFailed", "");
 84|                             new arc.scene.ui.Dialog(){
 85|                                 {
 86|                                     setFillParent(true);
 87|                                     Runnable $rebuild = ()->{
 88|                                         float w = Math.min(arc.Core.graphics.getWidth() / arc.scene.ui.layout.Scl.scl(1.2F), 560);
 89|                                         cont.clearChildren();
 90|                                         cont.table((main)->{
 91|                                             main.add(arc.Core.bundle.get("warn.uncLoadFailed"));
 92|                                             main.row();
 93|                                             main.image().color(mindustry.graphics.Pal.accent).growX().height(5).colspan(2).pad(0).padBottom(8).padTop(8).margin(0);
 94|                                             main.row();
 95|                                             main.table((t)->{
 96|                                                 t.add(arc.Core.bundle.get("warn.caused")).color(arc.graphics.Color.lightGray).padBottom(10);
 97|                                                 t.row();
 98|                                                 t.pane((table)->{
 99|                                                     for (String $s : $modStatus.split(";")) {
100|                                                         if ($s.isEmpty()) continue;
101|                                                         final String[] $modStat = $s.split("::");
102|                                                         final arc.files.ZipFi $f = new arc.files.ZipFi(new arc.files.Fi($modStat[0]));
103|                                                         final arc.files.Fi manifest = $f.child("mod.json").exists() ? $f.child("mod.json") : $f.child("mod.hjson").exists() ? $f.child("mod.hjson") : $f.child("plugin.json").exists() ? $f.child("plugin.json") : $f.child("plugin.hjson");
104|                                                         final arc.util.serialization.Jval $info = arc.util.serialization.Jval.read(manifest.reader());
105|                                                         final String name = $info.getString("name", "");
106|                                                         final String displayName = $info.getString("displayName", "");
107|                                                         final arc.files.Fi $icon = $f.child("icon.png");
108|                                                         table.table((modInf)->{
109|                                                             modInf.defaults().left();
110|                                                             modInf.image().size(112).get().setDrawable($icon.exists() ? new arc.scene.style.TextureRegionDrawable(new arc.graphics.g2d.TextureRegion(new arc.graphics.Texture($icon))) : mindustry.gen.Tex.nomap);
111|                                                             modInf.left().table((text)->{
112|                                                                 text.left().defaults().left();
113|                                                                 text.add("[accent]" + displayName);
114|                                                                 text.row();
115|                                                                 text.add("[gray]" + name);
116|                                                                 text.row();
117|                                                                 text.add("[crimson]" + ($modStat[1].equals("dis") ? arc.Core.bundle.get("warn.uncDisabled") : $modStat[1].equals("none") ? arc.Core.bundle.get("warn.uncNotFound") : $modStat[1].startsWith("old") ? arc.Core.bundle.format("warn.uncVersionOld", $modStat[1].replace("old", "")) : arc.Core.bundle.format("warn.uncVersionNewer", $modStat[1].replace("new", ""))));
118|                                                             }).padLeft(5).top().growX();
119|                                                         }).padBottom(4).padLeft(12).padRight(12).growX().fillY().left();
120|                                                         table.row();
121|                                                         table.image().color(arc.graphics.Color.gray).growX().height(6).colspan(2).pad(0).margin(0);
122|                                                         table.row();
123|                                                     }
124|                                                 }).grow().maxWidth(w);
125|                                             }).grow().top();
126|                                             main.row();
127|                                             main.image().color(mindustry.graphics.Pal.accent).growX().height(6).colspan(2).pad(0).padBottom(12).margin(0).bottom();
128|                                             main.row();
129|                                             main.add(arc.Core.bundle.format("warn.currentUncVersion", $libFile != null ? "" + $libVersion : arc.Core.bundle.get("warn.libNotFound"))).padBottom(10).bottom();
130|                                             main.row();
131|                                             final arc.struct.Seq<arc.scene.ui.Button> $buttons = new arc.struct.Seq<>();
132|                                             if ($disabled.get()) {
133|                                                 $buttons.add(arc.scene.utils.Elem.newButton(arc.Core.bundle.get("warn.enableLib"), ()->{
134|                                                     arc.Core.settings.put("mod-universe-core-enabled", true);
135|                                                     mindustry.Vars.ui.showInfoOnHidden("@mods.reloadexit", ()->{
136|                                                         arc.util.Log.info("Exiting to reload mods.");
137|                                                         arc.Core.app.exit();
138|                                                     });
139|                                                 }));
140|                                             } else {
141|                                                 $buttons.add(arc.scene.utils.Elem.newButton(arc.Core.bundle.get("warn.download"), ()->{
142|                                                     final java.io.InputStream[] $stream = new java.io.InputStream[1];
143|                                                     final float[] $downloadProgress = {0};
144|                                                     final mindustry.ui.dialogs.BaseDialog[] $di = new mindustry.ui.dialogs.BaseDialog[]{null};
145|                                                     arc.util.Http.get("https://api.github.com/repos/EB-wilson/UniverseCore/releases/latest").timeout(900).error((e)->{
146|                                                         mindustry.Vars.ui.showException(arc.Core.bundle.get("warn.downloadFailed"), e);
147|                                                         arc.util.Log.err(e);
148|                                                         $di[0].hide();
149|                                                     }).submit((res)->{
150|                                                         final arc.util.serialization.Jval $json = arc.util.serialization.Jval.read(res.getResultAsString());
151|                                                         final arc.util.serialization.Jval.JsonArray $assets = $json.get("assets").asArray();
152|                                                         final arc.util.serialization.Jval $asset = $assets.find((j)->j.getString("name").endsWith(".jar"));
153|                                                         if ($asset != null) {
154|                                                             final String $downloadUrl = $asset.getString("browser_download_url");
155|                                                             arc.util.Http.get($downloadUrl, (result)->{
156|                                                                 $stream[0] = result.getResultAsStream();
157|                                                                 final arc.files.Fi $temp = mindustry.Vars.tmpDirectory.child("UniverseCore.jar");
158|                                                                 final arc.files.Fi $file = mindustry.Vars.modDirectory.child("UniverseCore.jar");
159|                                                                 final long $length = result.getContentLength();
160|                                                                 final arc.func.Floatc $cons = $length <= 0 ? (f)->{
161|                                                                 } : (p)->$downloadProgress[0] = p;
162|                                                                 arc.util.io.Streams.copyProgress($stream[0], $temp.write(false), $length, 4096, $cons);
163|                                                                 if ($libFile != null && $libFile.exists()) $libFile.delete();
164|                                                                 $temp.moveTo($file);
165|                                                                 try {
166|                                                                     mindustry.Vars.mods.importMod($file);
167|                                                                     $file.file().delete();
168|                                                                     hide();
169|                                                                     mindustry.Vars.ui.mods.show();
170|                                                                 } catch (java.io.IOException e) {
171|                                                                     mindustry.Vars.ui.showException(e);
172|                                                                     arc.util.Log.err(e);
173|                                                                     $di[0].hide();
174|                                                                 }
175|                                                             }, (e)->{
176|                                                                 mindustry.Vars.ui.showException(arc.Core.bundle.get("warn.downloadFailed"), e);
177|                                                                 arc.util.Log.err(e);
178|                                                                 $di[0].hide();
179|                                                             });
180|                                                         } else throw new RuntimeException("release file was not found");
181|                                                     });
182|                                                     $di[0] = new mindustry.ui.dialogs.BaseDialog(""){
183|                                                         {
184|                                                             titleTable.clearChildren();
185|                                                             cont.table(mindustry.gen.Tex.pane, (t)->{
186|                                                                 t.add(arc.Core.bundle.get("warn.downloading")).top().padTop(10).get();
187|                                                                 t.row();
188|                                                                 t.add(new mindustry.ui.Bar(()->arc.util.Strings.autoFixed($downloadProgress[0], 1) + "%", ()->mindustry.graphics.Pal.accent, ()->$downloadProgress[0])).growX().height(30).pad(4);
189|                                                             }).size(320, 175);
190|                                                             cont.row();
191|                                                             cont.button(arc.Core.bundle.get("warn.cancel"), ()->{
192|                                                                 hide();
193|                                                                 try {
194|                                                                     if ($stream[0] != null) $stream[0].close();
195|                                                                 } catch (java.io.IOException e) {
196|                                                                     arc.util.Log.err(e);
197|                                                                 }
198|                                                             }).fill();
199|                                                         }
200|                                                     };
201|                                                     $di[0].show();
202|                                                 }));
203|                                                 $buttons.add(arc.scene.utils.Elem.newButton(arc.Core.bundle.get("warn.openfile"), ()->{
204|                                                     mindustry.Vars.platform.showMultiFileChooser((fi)->{
205|                                                         final arc.files.ZipFi $file = new arc.files.ZipFi(fi);
206|                                                         final arc.files.Fi manifest = $file.child("mod.hjson").exists() ? $file.child("mod.hjson") : null;
207|                                                         if (manifest == null) {
208|                                                             mindustry.Vars.ui.showErrorMessage("not a mod file, no mod.hjson found");
209|                                                             return;
210|                                                         }
211|                                                         final arc.util.serialization.Jval $info = arc.util.serialization.Jval.read(manifest.reader());
212|                                                         if (!$info.getString("name", "").equals("universe-core")) {
213|                                                             mindustry.Vars.ui.showErrorMessage("not UniverseCore mod file");
214|                                                         } else if ($versionValid.get($info.getString("version", "0.0.0")) == 1) {
215|                                                             mindustry.Vars.ui.showErrorMessage("version was deprecated, require: 1.17.4, select: " + $info.getString("version", "0.0.0"));
216|                                                         } else if ($versionValid.get($info.getString("version", "0.0.0")) == 2) {
217|                                                             mindustry.Vars.ui.showErrorMessage("version was too newer, require: 1.17.4, select: " + $info.getString("version", "0.0.0"));
218|                                                         } else {
219|                                                             try {
220|                                                                 if ($libFile != null && $libFile.exists()) $libFile.delete();
221|                                                                 mindustry.Vars.mods.importMod($file);
222|                                                                 hide();
223|                                                                 mindustry.Vars.ui.mods.show();
224|                                                             } catch (java.io.IOException e) {
225|                                                                 mindustry.Vars.ui.showException(e);
226|                                                                 arc.util.Log.err(e);
227|                                                             }
228|                                                         }
229|                                                     }, "zip", "jar");
230|                                                 }));
231|                                             }
232|                                             $buttons.add(arc.scene.utils.Elem.newButton(arc.Core.bundle.get("warn.goLibPage"), ()->{
233|                                                 if (!arc.Core.app.openURI("https://github.com/EB-wilson/UniverseCore")) {
234|                                                     mindustry.Vars.ui.showErrorMessage("@linkfail");
235|                                                     arc.Core.app.setClipboardText("https://github.com/EB-wilson/UniverseCore");
236|                                                 }
237|                                             }));
238|                                             $buttons.add(arc.scene.utils.Elem.newButton(arc.Core.bundle.get("warn.openModDir"), ()->{
239|                                                 if (!arc.Core.app.openFolder(mindustry.Vars.modDirectory.path())) {
240|                                                     mindustry.Vars.ui.showInfo(arc.Core.bundle.get("warn.androidOpenFolder"));
241|                                                     arc.Core.app.setClipboardText(mindustry.Vars.modDirectory.path());
242|                                                 }
243|                                             }));
244|                                             $buttons.add(arc.scene.utils.Elem.newButton(arc.Core.bundle.get("warn.exit"), ()->arc.Core.app.exit()));
245|                                             main.table((buttons)->{
246|                                                 buttons.clearChildren();
247|                                                 if (arc.Core.scene.getWidth() < 168 * ($disabled.get() ? 4 : 5)) {
248|                                                     buttons.table((but)->{
249|                                                         but.defaults().growX().height(55).pad(4);
250|                                                         for (arc.scene.ui.Button button : $buttons) {
251|                                                             but.add(button);
252|                                                             but.row();
253|                                                         }
254|                                                     }).growX().fillY();
255|                                                 } else {
256|                                                     buttons.table((but)->{
257|                                                         but.defaults().width(160).height(55).pad(4);
258|                                                         for (arc.scene.ui.Button button : $buttons) {
259|                                                             but.add(button);
260|                                                         }
261|                                                     }).fill().bottom().padBottom(8);
262|                                                 }
263|                                             }).growX().fillY();
264|                                         }).grow().top().pad(0).margin(0);
265|                                     };
266|                                     $rebuild.run();
267|                                     resized($rebuild);
268|                                 }
269|                             }.show();
270|                         });
271|                     }
272|                 } else {
273|                     arc.util.Log.info("dependence mod was not loaded, load it now");
274|                     arc.util.Log.info("you will receive an exception that threw by game, tell you the UniverseCore was load fail and skipped.\ndon\'t worry, this is expected, it will not affect your game");
275|                     try {
276|                         java.lang.reflect.Method $load = mindustry.mod.Mods.class.getDeclaredMethod("loadMod", arc.files.Fi.class);
277|                         $load.setAccessible(true);
278|                         java.lang.reflect.Field $f = mindustry.mod.Mods.class.getDeclaredField("mods");
279|                         $f.setAccessible(true);
280|                         arc.struct.Seq<mindustry.mod.Mods.LoadedMod> mods = (arc.struct.Seq<mindustry.mod.Mods.LoadedMod>)$f.get(mindustry.Vars.mods);
281|                         mods.add((mindustry.mod.Mods.LoadedMod)$load.invoke(mindustry.Vars.mods, $libFile));
282|                     } catch (NoSuchFieldException | NoSuchMethodException | IllegalAccessException | java.lang.reflect.InvocationTargetException e) {
283|                         e.printStackTrace();
284|                     }
285|                 }
286|             }
287|         }
288|         if ($status$ == 0) {
289|             universecore.UncCore.signup(chire.ChireJavaMod.class);
290|         } else {
291|             if ($status$ == 1) {
292|                 arc.util.Log.err("universeCore mod was disabled");
293|             } else if ($status$ == 2) {
294|                 arc.util.Log.err("universeCore mod file was not found");
295|             } else if ($status$ == 3) {
296|                 arc.util.Log.err("universeCore version was deprecated, version: " + $libVersionValue + " require: 1.17.4");
297|             } else if ($status$ == 4) {
298|                 arc.util.Log.err("universeCore version was too newer, version: " + $libVersionValue + " require: 1.17.4");
299|             }
300|         }
301|     }
302|     private String searchtxt;
303|     private String keytxt;
304|     private int unitsCreated;
305|     private String downloadHttp;
306|     
307|     public ChireJavaMod() {
308|         if ($status$ != 0) return;
309|         new INIT_INTERNAL();
310|     }
311|     
312|     @Override
313|     public void loadContent() {
314|         if ($status$ != 0) return;
315|         Log.info("Loading some example content.");
316|         CRBlocks.load();
317|         CRPlanets.load();
318|         CRTechTree.load();
319|         CRUnitTypes.load();
320|         runEvents();
321|     }
322|     
323|     public void qwert(Button button) {
324|         if ($status$ != 0) return;
325|         Table container = Core.scene.table();
326|         float width = 230.0F;
327|         Drawable background = Styles.black6;
328|         container.marginLeft(-Core.graphics.getWidth());
329|         container.marginBottom(-Core.graphics.getHeight());
330|         container.add().width(Core.graphics.getWidth() / 10.0F);
331|         container.table(background, (t)->{
332|             t.defaults().width(width).height(70.0F);
333|             t.add(button);
334|         }).width(width);
335|     }
336|     
337|     public void runEvents() {
338|         if ($status$ != 0) return;
339|         unitsCreated = getInt("unitsCreated");
340|         Events.on(EventType.UnitCreateEvent.class, (e)->{
341|             if (e.unit.team == state.rules.defaultTeam) {
342|                 unitsCreated++;
343|             }
344|         });
345|     }
346|     
347|     private class INIT_INTERNAL {
348|         
349|         public INIT_INTERNAL() {
350|             Log.info("Loaded ExampleJavaMod constructor.");
351|             Events.on(ClientLoadEvent.class, (e)->{
352|                 Time.runTask(10.0F, ()->{
353|                     BaseDialog dialog = new BaseDialog("frog");
354|                     dialog.cont.add("behold").row();
355|                     dialog.cont.image(Core.atlas.find("example-java-mod-frog")).pad(20.0F).row();
356|                     dialog.cont.button("I see", dialog::hide).size(100.0F, 50.0F);
357|                     dialog.cont.button(Icon.pencil, Styles.cleari, ()->{
358|                         BaseDialog dialog1 = new BaseDialog("@editmessage");
359|                         searchtxt = get(keytxt, String.class, String::new);
360|                         if (Objects.equals(searchtxt, "")) {
361|                             searchtxt = "null!!!";
362|                             JSONObject jsonObject = new JSONObject();
363|                             jsonObject.put("name", "chire");
364|                             jsonObject.put("my", true);
365|                             searchtxt = String.valueOf(jsonObject);
366|                         }
367|                         dialog1.cont.field(keytxt, (res)->{
368|                             keytxt = res;
369|                         }).size(1000.0F, 50.0F).row();
370|                         dialog1.cont.field(searchtxt, (res)->{
371|                             searchtxt = res;
372|                         }).size(1000.0F, 50.0F);
373|                         dialog1.cont.button("\u6dfb\u52a0", ()->{
374|                             put(keytxt, searchtxt);
375|                         }).size(100.0F, 50.0F);
376|                         dialog1.cont.button("\u6e05\u9664", ()->{
377|                             remove(keytxt);
378|                         }).size(100.0F, 50.0F).row();
379|                         dialog1.cont.button("\u9000\u51fa", dialog1::hide).size(100.0F, 50.0F);
380|                         dialog1.closeOnBack();
381|                         dialog1.show();
382|                     }).size(100.0F, 50.0F);
383|                     dialog.cont.button(Icon.admin, Styles.cleari, ()->{
384|                         ui.planet.state.planet = Planets.erekir;
385|                         BaseDialog dialog2 = new BaseDialog("@editmessage");
386|                         put("unitsCreated", unitsCreated);
387|                         dialog2.cont.add(getString("unitsCreated")).row();
388|                         dialog2.cont.button("ok", dialog2::hide).size(100.0F, 50.0F);
389|                         dialog2.show();
390|                     }).size(100.0F, 50.0F);
391|                     MobileButton set = new MobileButton(Icon.adminSmall, "\u6253\u5f00\u5f39\u7a97", dialog::toggle);
392|                     qwert(set);
393|                     dialog.show();
394|                 });
395|             });
396|         }
397|     }
398| }

